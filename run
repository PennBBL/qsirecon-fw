#! /bin/bash

# DEFINE VARIABLES
FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
QSIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
LICENSE_FILE=/opt/freesurfer/license.txt
FREESURFER_LICENSE_DIR=$INPUT_DIR/freesurfer_license
BIDS_DIR=$INPUT_DIR/bids_dataset
CONTAINER='[flywheel/qsirecon]'
RECON_SPEC_FILE=$(ls $INPUT_DIR/recon_spec/*.json | head -n 1 )


################################################################################
# DISPLAY QSIPREP DOCKERFILE FOR BUILD INFO
echo -e "$CONTAINER BEGIN QSIPREP DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END QSIPREP DOCKERFILE \n"


################################################################################
# CONFIGURE ENV
source ${FLYWHEEL_BASE}/docker-env.sh


##############################################################################
# Parse configuration
function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

config_save_outputs="$(parse_config 'save_outputs')"
config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
config_intermediate_files="$(parse_config 'intermediate_files')"
config_intermediate_folders="$(parse_config 'intermediate_folders')"
config_recon_builtin="$(parse_config 'recon_builtin')"
config_nprocs="$(parse_config 'sge-cpu')"
config_sloppy="$(parse_config 'sloppy')"


if [[ -n "$RECON_SPEC_FILE" ]]; then
  recon_spec_FLAG='--recon_spec '$RECON_SPEC_FILE
elif [[ -n "$config_recon_builtin" ]]; then
  recon_spec_FLAG='--recon_spec '$config_recon_builtin
else
  recon_spec_FLAG=' '
fi

if [[${config_sloppy} == 'true']]; then
  sloppy_FLAG='--sloppy'
else
  sloppy_FLAG=''
fi

########################
# Freesurfer License
########################

echo "$CONTAINER  Attempting to generate license file..."

need_license=1

# OPTION 1:  User-Provided license file
if [[ -d "$FREESURFER_LICENSE_DIR" ]]; then
  fs_file=$(find $FREESURFER_LICENSE_DIR/* -type f | head -1)
  if [[ -n "$fs_file" ]]; then
    echo "    -->Generating FREESURFER LICENSE file from $fs_file"
    cp "$fs_file" ${LICENSE_FILE}
    need_license=0
  fi
fi

find ${INPUT_DIR}

# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Unpack the qsiprep outputs
cd ${INPUT_DIR}/qsiprep_output
unzip *.zip
rm *.zip
RECON_INPUT=`pwd`/*/qsiprep

# RUN QSIPREP: recon mode

time /usr/local/miniconda/bin/qsiprep \
      ${RECON_INPUT} \
      ${QSIPREP_OUTPUT_DIR} \
      participant \
      --recon-input ${RECON_INPUT} \
      --recon-only \
      -w ${WORKING_DIR} \
      --nthreads ${config_nprocs} \
      -v -v \
      ${sloppy_FLAG} \
      ${recon_spec_FLAG}


QSIPREP_EXITSTATUS=$?

if [[ -d ${QSIPREP_OUTPUT_DIR}/bids_dataset ]]
then
    rm -rf ${QSIPREP_OUTPUT_DIR}/bids_dataset
fi

rm -rf ${RECON_INPUT}
################################################################################
# CLEANUP OUTPUTS

if [[ $QSIPREP_EXITSTATUS == 0 ]] ; then

  # Convert index to standalone zip archive
  html_file=$(find "$QSIPREP_OUTPUT_DIR"/qsiprep/ -name "sub-*.html")
  SUB_ID=$(basename "$html_file" .html)

  # Look for files/folders to preserve from the working DIRECTORY
  work_file_zip="$GEAR_OUTPUT_DIR"/qsiprep_work_selected_"$SUB_ID"_"$ANALYSIS_ID".zip
  if [[ -n "$config_intermediate_files" ]]; then
    echo "$CONTAINER  Archiving selected intermediate files..."
    cd "$WORKING_DIR"
    for f in "$config_intermediate_files"; do
      zip $work_file_zip `find . -type f -name "$f"`
    done
  fi

  if [[ -n "$config_intermediate_folders" ]]; then
    echo "$CONTAINER  Archiving selected intermediate folders..."
    cd "$WORKING_DIR"
    for f in $config_intermediate_folders; do
      zip $work_file_zip `find . -type d -name "$f"`
    done
  fi

  # Generate zipped output of qsiprep
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/qsiprep_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$QSIPREP_OUTPUT_DIR")

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$GEAR_OUTPUT_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/qsiprep_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_"$ANALYSIS_ID"  $(basename "$QSIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_"$ANALYSIS_ID"  $(basename "$QSIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$QSIPREP_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $QSIPREP_EXITSTATUS
