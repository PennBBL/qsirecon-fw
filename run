#! /bin/bash

# DEFINE VARIABLES
FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
QSIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
LICENSE_FILE=/opt/freesurfer/license.txt
FREESURFER_LICENSE_DIR=$INPUT_DIR/freesurfer_license
BIDS_DIR=$INPUT_DIR/bids_dataset
CONTAINER='[flywheel/qsiprep]'
RECON_SPEC_FILE=$(ls $INPUT_DIR/recon_spec/*.json | head -n 1 )
EDDY_CONFIG_FILE=$(ls $INPUT_DIR/eddy_config/*.json | head -n 1 )


################################################################################
# DISPLAY QSIPREP DOCKERFILE FOR BUILD INFO
echo -e "$CONTAINER BEGIN QSIPREP DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END QSIPREP DOCKERFILE \n"


################################################################################
# CONFIGURE ENV
source ${FLYWHEEL_BASE}/docker-env.sh


##############################################################################
# Parse configuration
function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

config_save_outputs="$(parse_config 'save_outputs')"
config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
config_intermediate_files="$(parse_config 'intermediate_files')"
config_intermediate_folders="$(parse_config 'intermediate_folders')"

##################
# Workflow Options
config_ignore="$(parse_config 'ignore')"
config_longitudinal="$(parse_config 'longitudinal')"
config_dwi_denoise_window="$(parse_config 'dwi_denoise_window')"
config_denoise_before_combining="$(parse_config 'denoise_before_combining')"
config_combine_all_dwis="$(parse_config 'combine_all_dwis')"
config_write_local_bvecs="$(parse_config 'write_local_bvecs')"
config_b0_to_t1w_transform="$(parse_config 'b0_to_t1w_transform')"
config_output_space="$(parse_config 'output_space')"
config_template="$(parse_config 'template')"
config_output_resolution="$(parse_config 'output_resolution')"

config_b0_motion_corr_to="$(parse_config 'b0_motion_corr_to')"
config_b0_threshold="$(parse_config 'b0_threshold')"
config_do_reconall="$(parse_config 'do_reconall')"
config_hmc_transform="$(parse_config 'hmc_transform')"
config_hmc_model="$(parse_config 'hmc_model')"
config_shoreline_iters="$(parse_config 'shoreline_iters')"
config_impute_slice_threshold="$(parse_config 'impute_slice_threshold')"
config_force_spatial_normalization="$(parse_config 'force_spatial_normalization')"
config_skull_strip_template="$(parse_config 'skull_strip_template')"
config_skull_strip_fixed_seed="$(parse_config 'skull_strip_fixed_seed')"
config_fmap_bspline="$(parse_config 'fmap_bspline')"
config_fmap_no_demean="$(parse_config 'fmap_no_demean')"
config_prefer_dedicated_fmaps="$(parse_config 'prefer_dedicated_fmaps')"
config_use_syn_sdc="$(parse_config 'use_syn_sdc')"
config_force_syn="$(parse_config 'force_syn')"
config_sloppy="$(parse_config 'sloppy')"


if [[ $config_ignore == '' ]]; then
  ignore_FLAG=''
else
  ignore_FLAG='--ignore '${config_ignore}
fi

if [[ $config_longitudinal == 'false' ]]; then
  longitudinal_FLAG=''
else
  longitudinal_FLAG='--longitudinal'
fi

dwi_denoise_window_FLAG='--dwi-denoise-window '${config_dwi_denoise_window}

if [[ $config_denoise_before_combining == 'false' ]]; then
  denoise_before_combining_FLAG=''
else
  denoise_before_combining_FLAG='--denoise_before_combining'
fi

if [[ $config_combine_all_dwis == 'false' ]]; then
  combine_all_dwis_FLAG=''
else
  combine_all_dwis_FLAG='--combine_all_dwis'
fi

if [[ $config_write_local_bvecs == 'false' ]]; then
  write_local_bvecs_FLAG=''
else
  write_local_bvecs_FLAG='--write-local-bvecs'
fi

b0_to_t1w_transform_FLAG='--b0-to-t1w-transform '${config_b0_to_t1w_transform}
b0_threshold_FLAG='--b0-threshold '${config_b0_threshold}
output_space_FLAG='--output-space '${config_output_space}
template_FLAG='--template '${config_template}
output_resolution_FLAG='--output-resolution '${config_output_resolution}
b0_motion_corr_to_FLAG='--b0-motion-corr-to '${config_b0_motion_corr_to}
hmc_transform_FLAG='--hmc-transform '${config_hmc_transform}
hmc_model_FLAG='--hmc-model '${config_hmc_model}
shoreline_iters_FLAG='--shoreline-iters '${config_shoreline_iters}
impute_slice_threshold_FLAG='--impute-slice-threshold '${config_impute_slice_threshold}


if [[ $config_force_spatial_normalization == 'false' ]]; then
  force_spatial_normalization_FLAG=''
else
  force_spatial_normalization_FLAG='--force-spatial-normalization'
fi

skull_strip_template_FLAG='--skull-strip-template '${config_skull_strip_template}

if [[ $config_skull_strip_fixed_seed == 'false' ]]; then
  skull_strip_fixed_seed_FLAG=''
else
  skull_strip_fixed_seed_FLAG='--skull-strip-fixed-seed'
fi

if [[ $config_do_reconall == 'false' ]]; then
  freesurfer_FLAG=''
else
  freesurfer_FLAG='--do-reconall'
fi

if [[ $config_fmap_bspline == 'false' ]]; then
  fmap_bspline_FLAG=''
else
  fmap_bspline_FLAG='--fmap-bspline'
fi

if [[ $config_fmap_no_demean == 'false' ]]; then
  fmap_no_demean_FLAG=''
else
  fmap_no_demean_FLAG='--fmap-no-demean'
fi

if [[ $config_prefer_dedicated_fmaps == 'false' ]]; then
  prefer_dedicated_fmaps_FLAG=''
else
  prefer_dedicated_fmaps_FLAG='--prefer_dedicated_fmaps'
fi

##################
# Specific options for SyN distortion correction
if [[ $config_use_syn_sdc == 'false' ]]; then
  use_syn_sdc_FLAG=''
else
  use_syn_sdc_FLAG='--use-syn-sdc'
fi

if [[ $config_force_syn == 'false' ]]; then
  force_syn_FLAG=''
else
  force_syn_FLAG='--force-syn'
fi

if [[ $config_sloppy == 'false' ]]; then
  sloppy_FLAG=''
else
  sloppy_FLAG='--sloppy'
fi

if [[ -n "$RECON_SPEC_FILE" ]]; then
  recon_spec_FLAG='--recon_spec '$RECON_SPEC_FILE
else
  recon_spec_FLAG=''
fi

if [[ -n "$EDDY_CONFIG_FILE" ]]; then
  eddy_config_FLAG='--eddy_config '$EDDY_CONFIG_FILE
else
  eddy_config_FLAG=''
fi

########################
# Freesurfer License
########################

echo "$CONTAINER  Attempting to generate license file..."

need_license=1

# OPTION 1:  User-Provided license file
if [[ -d "$FREESURFER_LICENSE_DIR" ]]; then
  fs_file=$(find $FREESURFER_LICENSE_DIR/* -type f | head -1)
  if [[ -n "$fs_file" ]]; then
    echo "    -->Generating FREESURFER LICENSE file from $fs_file"
    cp "$fs_file" ${LICENSE_FILE}
    need_license=0
  fi
fi

# Other options handled in parse config...
if [[ $need_license == 1 ]]; then
  /usr/local/miniconda/bin/python $FLYWHEEL_BASE/fs_license.py --json_file=${CONFIG_FILE}
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem generating FreeSurfer License! Exiting(1)"
    exit 1
  fi
fi

################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use Python SDK to accomplish this task

/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive_fw_heudiconv.py
if [[ $? != 0 ]]; then
  echo "$CONTAINER  Problem creating archive! Exiting (1)"
  exit 1
fi


################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Show the contents of the BIDS directory
ls -R ${BIDS_DIR}


################################################################################
# RUN QSIPREP

time /usr/local/miniconda/bin/qsiprep \
      --bids-dir ${BIDS_DIR} \
      --output-dir ${QSIPREP_OUTPUT_DIR} \
      --analysis-level participant \
      -w ${WORKING_DIR} \
      -v -v \
      ${ignore_FLAG} \
      ${eddy_config_FLAG} \
      ${longitudinal_FLAG} \
      ${dwi_denoise_window_FLAG} \
      ${denoise_before_combining_FLAG} \
      ${combine_all_dwis_FLAG} \
      ${write_local_bvecs_FLAG} \
      ${b0_to_t1w_transform_FLAG} \
      ${b0_threshold_FLAG} \
      ${output_space_FLAG} \
      ${template_FLAG} \
      ${output_resolution_FLAG} \
      ${b0_motion_corr_to_FLAG} \
      ${hmc_transform_FLAG} \
      ${hmc_model_FLAG} \
      ${shoreline_iters_FLAG} \
      ${impute_slice_threshold_FLAG} \
      ${force_spatial_normalization_FLAG} \
      ${skull_strip_template_FLAG} \
      ${skull_strip_fixed_seed_FLAG} \
      ${freesurfer_FLAG} \
      ${fmap_bspline_FLAG} \
      ${fmap_no_demean_FLAG} \
      ${prefer_dedicated_fmaps_FLAG} \
      ${use_syn_sdc_FLAG} \
      ${force_syn_FLAG} \
      ${sloppy_FLAG} \
      ${recon_spec_FLAG}


QSIPREP_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS

if [[ $QSIPREP_EXITSTATUS == 0 ]] ; then

  # Convert index to standalone zip archive
  html_file=$(find "$QSIPREP_OUTPUT_DIR"/qsiprep/ -name "sub-*.html")
  SUB_ID=$(basename "$html_file" .html)

  if [[ -n "$html_file" ]]; then
    echo "$CONTAINER  Converting output html report..."
    output_html_file="$GEAR_OUTPUT_DIR"/`basename "$html_file" .html`_"$ANALYSIS_ID".html.zip
    cd $(dirname $html_file)
    cp "$html_file" index.html
    zip -r -q "$output_html_file" \
        index.html \
        "$SUB_ID"/figures \
        "$WORKING_DIR"/reportlets/qsiprep/"$SUB_ID" && \
        rm index.html
    echo "$CONTAINER  HTML report converted."
  else
    echo "$CONTAINER  no output html report found!"
  fi

  # Look for files/folders to preserve from the working DIRECTORY
  work_file_zip="$GEAR_OUTPUT_DIR"/qsiprep_work_selected_"$SUB_ID"_"$ANALYSIS_ID".zip
  if [[ -n "$config_intermediate_files" ]]; then
    echo "$CONTAINER  Archiving selected intermediate files..."
    cd "$WORKING_DIR"
    for f in "$config_intermediate_files"; do
      zip $work_file_zip `find . -type f -name "$f"`
    done
  fi

  if [[ -n "$config_intermediate_folders" ]]; then
    echo "$CONTAINER  Archiving selected intermediate folders..."
    cd "$WORKING_DIR"
    for f in $config_intermediate_folders; do
      zip $work_file_zip `find . -type d -name "$f"`
    done
  fi

  # Generate zipped output of qsiprep
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/qsiprep_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$QSIPREP_OUTPUT_DIR")

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$GEAR_OUTPUT_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/qsiprep_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_"$ANALYSIS_ID"  $(basename "$QSIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_"$ANALYSIS_ID"  $(basename "$QSIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_qsiprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

  ################################################################################
  # COPY ANALYSIS TO PROJECT LEVEL IF MULTI-SESSION
  #   Use Python SDK to accomplish this task

  /usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/move_to_project.py
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem resolving multi-session structure! Exiting (1)"
    exit 1
  fi

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$QSIPREP_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $QSIPREP_EXITSTATUS
